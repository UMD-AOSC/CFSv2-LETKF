#!/usr/bin/env python
#SBATCH -n 20
################################################################################

## load built-in modules
import sys
import argparse
import os, shutil
import subprocess as sp
from glob import glob
import datetime as dt
import multiprocessing as mp

## load 3rd party modules
sys.path.insert(1,'.')
import common

## setup the logging system
log = common.setupLog()
log.info("MOM-LETKF, originally developed by Steve Penny")
log.info("")

## directory locations
## TODO, make these configurable
tmpDir   = os.getenv("TMP_DIR_LOCAL")+'/cfs/mom-letkf'
#obsDir   = '/lustre/tsluka/data/obs/ncep_obs'
letkfDir = os.getenv("CFS_LETKF_ROOT")+'/letkf-mom/mom4'
#cfsrDir   = '/lustre/tsluka/data/CFSR/T62/'
fixDir = os.getenv("FIX_DIR_OM")

## get the command line arguments
parser = argparse.ArgumentParser(
    formatter_class = argparse.ArgumentDefaultsHelpFormatter,
    description=(
        "CFS-LETKF data assimilation step for the MOM"))

## required variables
g = parser.add_argument_group(title="required parameters")
g.add_argument('--date', metavar='date', required=True,
    help="date to perform the analysis for, in format of YYYYMMDDHH")
g.add_argument('--path', metavar='path', required=True,
    help="path to the directory storing the experiment")

## optional variables
g = parser.add_argument_group(title="optional parameters")
g. add_argument('--mem', metavar='members', type=int,
    help=("number of ensemble members. BY default the script "
          "will automatically determine the number of ensemble "
          "members based on the directory structure in the path given"))

## parse the variables
args = parser.parse_args()
args.path = os.path.abspath(args.path)
cdate = dt.datetime.strptime(args.date, "%Y%m%d%H")
pdate = cdate - dt.timedelta(hours=6)
cdateShort = cdate.strftime("%Y%m%d%H")  ## current date (the date that was passed in as an arg)
pdateShort = pdate.strftime("%Y%m%d%H")  ## previous date (when the forecast was run from)

## other stuff
log.info(str(args))

## determine the number of ensembe members we are using
if args.mem is None:
    args.mem = common.getEnsMem(args.path)
    log.info("Using {0} ensemble members".format(args.mem))

log.info("")


################################################################################
################################################################################
## do the useful stuff...

pdate = cdate - dt.timedelta(hours=6)
pdateShort = pdate.strftime("%Y%m%d%H")
cdateShort = cdate.strftime("%Y%m%d%H")
mems = ['{0:03d}'.format(m+1) for m in range(args.mem)]


## setup local temporary directory
log.info('Setting up work directory...')
if os.path.exists(tmpDir):
    shutil.rmtree(tmpDir)
os.makedirs(tmpDir)
for m in mems:
    os.makedirs(tmpDir+'/'+m)
for f in ['letkf/letkf','obs/obsop']:
    shutil.copy(letkfDir+'/'+f,tmpDir+'/')
shutil.copy(fixDir+'/grid_spec_{}.nc.T{}'.format('05','62'),
            tmpDir+'/grid_spec.nc')
shutil.copy(os.getenv("CFS_LETKF_ROOT")+'/run/letkf_mom.nml',
            tmpDir+'/input.nml')

            
## copy the required shared files into the temporary directories
log.info('Copying MOM forecasts...')
for mem in mems:         
    filebase = args.path+'/gues/{}/{}_{}.'.format(
        mem, pdateShort,'F06')
    for f in ['temp_salt','velocity','sbc']:
        os.symlink(filebase+'ocean_{}.res.nc'.format(f),
                   tmpDir+'/gs01{}.ocean_{}.res.nc'.format(mem,f))
        shutil.copy(tmpDir+'/gs01001.ocean_{}.res.nc'.format(f),
                    tmpDir+'/anal{}.ocean_{}.res.nc'.format(mem,f))

        
## run the LETKF
log.info("Running GFS-LETKF...")
ret=sp.call('mpirun -n {} letkf'.format(os.getenv('NPROC')),
        shell=True, cwd=tmpDir)
if ret != 0:
    sys.exit(1)


## move the output to its final location
log.info("copying ensemble members to destination directory...")
def cp_func(mem):
    for f in ['temp_salt','velocity','sbc']:
        shutil.copy(tmpDir+'/anal{}.ocean_{}.res.nc'.format(mem,f),
            args.path+'/anal/{}/{}.ocean_{}.res.nc'.format(mem,cdateShort,f))
p=mp.Pool()
p.map(cp_func,mems)

log.info("copying mean/sprd files to destination directory...")
files=[
    ('gues_me.grd','/gues/mean/{}_ocn.grd'),
    ('gues_sp.grd','/gues/sprd/{}_ocn.grd'),
    ('anal_me.grd','/anal/mean/{}_ocn.grd'),
    ('anal_sp.grd','/anal/sprd/{}_ocn.grd'),]
def cp_func(f):
    dateStr=cdate.strftime('%Y/%Y%m/%Y%m%d/%Y%m%d%H/%Y%m%d%H')
    dst = args.path+f[1].format(dateStr)
    try:
        os.makedirs(os.path.dirname(dst))
    except:
        pass
    shutil.copy(tmpDir+'/'+f[0], dst)
p=mp.Pool()
p.map(cp_func,files)


## creat links for the restart files that were not changes
for m in mems:
    files = ['ocean_{}.res.nc'.format(x) for x in [
        'frazil','freesurf','neutral','velocity_advection']]
    files.append('ice_model.res.nc')
    for f in files:
        try:
            os.symlink(args.path+'/gues/{}/{}_F06.{}'.format(m,pdateShort,f),
                       args.path+'/anal/{}/{}.{}'.format(m,cdateShort,f))
        except:
            pass

    

##TODO move the infl_mul file

##TODO move log viles

log.info("Finished!")

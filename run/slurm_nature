#!/usr/bin/env python
################################################################################
## slurm_nature
## Runs a series of 6 hours forecasts to create a free running nature
##  run using the CFSv2
##
## Environment variables:
##  CFSR_DIR        directory where the CFSR atmosphere analyses are stored
##  CFS_LETKF_ROOT  root directory for the whole CFSv2-LETKF code
##  TMP_DIR_LOCAL   
################################################################################

## load built in modules
import argparse
import os,shutil, sys
import subprocess as sp
from glob import glob
import datetime as dt
import time
import numpy as np
import hashlib

## load 3rd party modules
import common
import slurm

## setup the logger
log = common.setupLog()

## configurables
## TODO, make these configurable from the command line
##############################
jobWatchSleep = 2            # in seconds
timeLimit_CFS = "10:00"

rootDir = os.getenv("CFS_LETKF_ROOT")
ssioPath = rootDir +'/util/bin/sscycle2'

################################################################################
################################################################################

    
## get the command line arguments
parser = argparse.ArgumentParser(
    formatter_class=argparse.ArgumentDefaultsHelpFormatter,
    description=(
        "Runs a series of 1 Day forecast cycles, useful to "
        "ensure that the CFS is working correctly, and somewhat "
        "useful in generating a nature run. A more efficient nature "
        "run script could be made (e.g. script should be changed "
        "so that CFSR boundary conditions every 6 hours are not needed "
        "and so that the run is longer than 6 hours, but it's "
        "good enough for now)"  ))
parser.add_argument('--start', metavar="date", required=True,
  help="start date to begin forecast from in YYYYMMDDHH format")
parser.add_argument('--end',  metavar="date",  required=True,
  help="date at which to end, in YYYYMMDDHH format")
parser.add_argument('--path', metavar='path', required=True,
  help="path to store the nature run in")
parser.add_argument('--ares', type=int, choices=[62,126,190,382,574,1148], default=62,help=(
    "horizontal resolution of the atmosphere (Default:T62)"))
parser.add_argument('--int', type=int, default=24, help=(
    "Interval of forecast segments in hours. The model will run for this amount of time, process the output, and then "
    "start again until the end date is reached. Needs to be a multiple of 6. (Default:24)"))
parser.add_argument('--partition',
  help="the SLURM partition to use, only meaningful overrides are 'debug' and 'scavenger'")
parser.add_argument('--account', default="aosc-hi",
  help="The slurm account to run the experiment with")
args=parser.parse_args()


## extra command line argument processing...
args.path = os.path.abspath(args.path)
args.ares_x,args.ares_y = common.getAtmRes(args.ares)
if (args.int % 6 ) != 0:
    log.critical("--int X needs to be a multiple of 6, you entered {}"+format(args.int))
    sys.exit(1)
    
if args.partition:
    slurm.partition =args.partition
    
startDate = dt.datetime.strptime(args.start, "%Y%m%d%H")
endDate   = dt.datetime.strptime(args.end, "%Y%m%d%H")
slurm.account = args.account
analGFS = os.getenv("CFSR_DIR")+"/T{}".format(args.ares)


## create the logging directory if not already existing,
## and setup a log file for this script
logDir = args.path+'/logs/'
if not os.path.exists(logDir):
    os.makedirs(logDir)
    os.makedirs(logDir+'/cfs')
common.addFileLog(log, logDir+'/controller_'+args.start+'.log')
log.info("CFSv2-LETKF nature run script")
log.info("Travis Sluka, University of Maryland, 2015")
log.info("")


## Log stuff...
log.info("Configuration:\n "+str(args))
log.info("Start date: "+str(startDate))
log.info("End date:   "+str(endDate))
log.info("")



################################################################################
################################################################################
## determine the tmp directory, as a hash of the output directory, so that
## the tmp directory is "random", though the same for the same experiments
dirhash = hashlib.md5(args.path).hexdigest()[0:6]
tmpDir = os.getenv("TMP_DIR_SHARED")+'/cfs_nature_'+dirhash
scycle_tmpDir = os.getenv("TMP_DIR_LOCAL")+'/cfs_nature_{}/sscycle'.format(dirhash)
log.info("Shared tmp directory: "+tmpDir)
log.info("Local tmp directory : "+scycle_tmpDir)

## make a local temporary work directory
for d in (tmpDir, scycle_tmpDir):
    if os.path.exists(d):
        shutil.rmtree(d)
    os.makedirs(d)

## copy required files
shutil.copy(ssioPath, scycle_tmpDir+'/sscycle2')



    
##################################################################################            
## Run cycle
##################################################################################
nproc_cfs = int(os.getenv("NPROC_OM"))+int(os.getenv("NPROC_AM"))+1
log.info("Using {:d} cores for CFS runs.".format(nproc_cfs))
cdate = startDate
while cdate < endDate:
    log.info("*** Begining "+str(cdate))
    cdateShort = cdate.strftime("%Y%m%d%H")
    ndate = cdate + dt.timedelta(hours=args.int)
    ndateShort = ndate.strftime("%Y%m%d%H")

    ## create the forecast from the given time
    ############################################################
    run = True
    while run:
        run = False
        inPath  = args.path+cdate.strftime("/%Y/%Y%m/%Y%m%d/%Y%m%d%H/")
        #args.path+ndate.strftime("/%Y/%Y%m/%Y%m%d/%Y%m%d%H/")

        # run the forecast
        job = slurm.Job(
            name = 'CFS_nature',
            cmd = rootDir+"/run/run_fcst {} {} {} --ares {} --wrkdir {} --len {} --period 6".format(
                inPath, inPath, cdateShort, args.ares, tmpDir, args.int),
            runtime = timeLimit_CFS,
            output  = logDir+'/cfs/cfs_'+cdateShort+'_%j.log',
            nproc   = nproc_cfs
        )        
        slurm.monitor((job,))

        
        ## run sscycle on the output of the gfs, move forecasts to analysis 
        [os.remove(f) for f in  glob(scycle_tmpDir+'/fort.*')]
        for h in range(6,args.int+1,6):
            hdate = cdate+dt.timedelta(hours=h)
            hdateShort = hdate.strftime("%Y%m%d%H")
            outPath = args.path+hdate.strftime("/%Y/%Y%m/%Y%m%d/%Y%m%d%H/")
            if not os.path.exists(outPath):
                os.makedirs(outPath)
                       
            shutil.move(inPath+cdate.strftime("/%Y%m%d%H_F{:02d}.sig".format(h)), scycle_tmpDir+'/fort.11')
            shutil.move(inPath+cdate.strftime("/%Y%m%d%H_F{:02d}.sfc".format(h)), scycle_tmpDir+'/fort.12')
            if sp.call("./sscycle2 {}".format(hdateShort), cwd=scycle_tmpDir, shell=True) != 0:
                print "error with calling sscyle"
                sys.exit(1)
            shutil.move(scycle_tmpDir+'/fort.21', outPath+hdate.strftime("/%Y%m%d%H.sig"))
            shutil.move(scycle_tmpDir+'/fort.22', outPath+hdate.strftime("/%Y%m%d%H.sfc"))
            [os.remove(f) for f in  glob(scycle_tmpDir+'/fort.*')]

            ## rename the ocean/ice files
            for f in glob(inPath+"/*F{:02d}.ocean*.nc".format(h))+glob(inPath+"/*F{:02d}.ice*.nc".format(h)):
                shutil.move(f, outPath+'/'+hdateShort+os.path.basename(f)[14:])

            ## rename the flux restart files
            for f in glob(inPath+"/*F{:02d}.fluxes_restart".format(h)):
                shutil.move(f, outPath+'/'+hdateShort+os.path.basename(f)[14:])
        
    ## incremment the date
    cdate = ndate
        
shutil.rmtree(tmpDir)

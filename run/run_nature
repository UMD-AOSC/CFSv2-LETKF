#!/bin/bash
#SBATCH -n 40
#SBATCH -N 2
###############################################################################
## Basic script to run the 6 hour forecast script in a cylce
##  to produce a nature run and test the CFS system.
## This script might need to be modified to suit your own system.
## This is not the most efficient way to run a long nature run, as the
##  system has to restart every 6 hours, but it's a good test to make sure
##  the 6 hour cycling is working before continuing on to DA experiments.
## This script runs everything as a single job, if using a computer with
##  SLURM system, the slurm_nature script instead has been optimized to submit
##  separate jobs for each 6 hour run, use that script instead.
###############################################################################
set -e


## Configurables
stime=2010010100                  ## starting date
etime=2010020100                  ## ending date
path=$CFS_LETKF_ROOT/DATA/nature  ## path to work in
amres=62                          ## atmospheric resolution
    ## ^ valid values are 62, 126, 190, 382, 574, 1148
    ## must match how the directory was initialized with
    ## init_nature


## The following shouldn't need to be modified
############################################################

## directories
rootDir=$CFS_LETKF_ROOT
ssioFile=$CFS_LETKF_ROOT/util/bin/sscycle2
tmpDir=$TMP_DIR_SHARED/cfs_nature

## determine the x/y size of grids based on TXX resolution
if [ "$amres" -eq "62" ]; then
    AM_RES_X=192
    AM_RES_Y=94
elif [ "$amres" -eq "126" ]; then
    AM_RES_X=384
    AM_RES_Y=190
elif [ "$amres" -eq "190" ]; then
    AM_RES_X=576
    AM_RES_Y=288
elif [ "$amres" -eq "382" ]; then
    AM_RES_X=1152
    AM_RES_Y=576
elif [ "$amres" -eq "574" ]; then
    AM_RES_X=1760
    AM_RES_Y=880
elif [ "$amres" -eq "1148" ]; then
    AM_RES_X=2304
    AM_RES_Y=1152
else
    echo "unsupported atm resloution: $AM_RES"
    exit 1
fi
			       


## run the loop
##############################
time=$stime
while [ "$time" -le "$etime" ]; do
    cd $CFS_LETKF_ROOT/run
    echo ""
    echo "Starting forecast from $time ..."

    ## determine source and destination directories
    ntime=$(date +%Y%m%d%H -d "${time:0:8} ${time:8:2} + 6 hours")
    srcDir=$path/${time:0:4}/${time:0:6}/${time:0:8}/${time}
    dstDir=$path/${ntime:0:4}/${ntime:0:6}/${ntime:0:8}/${ntime}

    ## run the 6 hour forecast, with output at 6 hours
    logPath=$path/logs/${time:0:4}/${time:0:6}   
    mkdir -p $logPath
    echo "Running the 6 hour forecast..."
    $rootDir/run/run_fcst $srcDir $dstDir $time --ares 6 --period 6 --ares $amres --wrkdir $tmpDir --len 6 > $logPath/$time.log

    ## rename the ocean/ice files
    mv $dstDir/${time}_F06.ice_model.res.nc $dstDir/$ntime.ice_model.res.nc
    ocnfiles=("density" "frazil" "freesurf" "neutral" "sbc" "temp_salt" "velocity" "velocity_advection")
    for f in ${ocnfiles[@]}; do
    	mv $dstDir/${time}_F06.ocean_$f.res.nc $dstDir/${ntime}.ocean_$f.res.nc
    done

    ## rename the flux restart file
    mv $dstDir/${time}_F06.fluxes_restart $dstDir/$ntime.fluxes_restart
    
    ## change the atmosphere forecast to an analysis.
    ## This runs sscycle2 on the forecast output so that
    ## the sig and sfc file headers are updated.
    echo "Running boundary update..."
    rm -rf $tmpDir
    mkdir -p $tmpDir
    cd $tmpDir
    mv $dstDir/${time}_F06.sig fort.11
    mv $dstDir/${time}_F06.sfc fort.12
    cp $ssioFile .
    printf "&common_gfs\n nlon=$AM_RES_X\n  nlat=$AM_RES_Y\n  gfs_jcap=$amres\n nlev=64\n /" > ssio.nml
    ./sscycle2 ${ntime}
    
    if [ "$?" -ne "0" ]; then
	echo "Error with sscyle"
	exit 1
    fi
    
    mv fort.21 $dstDir/${ntime}.sig
    mv fort.22 $dstDir/${ntime}.sfc
    rm -rf $tmpDir

    ## increment the time 6 hours
    time=$ntime
    
done

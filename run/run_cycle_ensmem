#!/usr/bin/env python
############################################################
##
## TODO, insert description
##
############################################################

## load buil-in python modules
import argparse
import os, shutil, sys
import subprocess as sp
from glob import glob
import datetime as dt
import hashlib

## load our own modules
import common

## setup the logging system
log = common.setupLog()

## determine which parts of the script to run, mainly for debugging,
## For normal operations these should all be True
do_cfs      = True
do_atmcnvt  = True
do_atmobsop = True
do_ocnobsop = True
do_cleanup  = True


############################################################
## get the command line / env arguments

parser = argparse.ArgumentParser(description=(
   "CFSv2-LETKF ensemble member script. This performs the following functions "
   "  1) Runs the CFS forecast for the given ensemble member (9 hour, or 6 hr if"
   " --3d is given) 2) converts the atmosphere to gridded files  3) runs the ocean "
   " observation operator."))

## required variables
parser.add_argument('path', metavar="PATH", help=(
    "Path to the directory storing the experiment."))
parser.add_argument('date', metavar="DATE", help=(
    "Date to start a forecast from, in YYYYMMDDHH format"))
parser.add_argument('ensNum', metavar="ENS_NUM", type=int, help=(
    "ensemble member number"))

parser.add_argument("--ares", type=int, required=True, help=(
   "atmospheric spectral resolution"))
parser.add_argument("--ores", default="05", choices=["05","1"])
parser.add_argument("--oobs", help=(
   "A list of 1 or more directories containing the ocean observations to be assimilated. "
   "If argument is not present, it is assumed no ocean observations are to be used."))
parser.add_argument("--aobs", help=(
   "A single directory containing the atmobservations to be assimilated. "
   "If argument is not present, it is assumed no atm observations are to be used."))

parser.add_argument("--3d", action="store_true", dest="is3d", help=(
   "if set, the CFS forecast is only run for 6 hours, with output at the end only. Otherwise"
   ", the forecast is run for 9 hours, with output every hour from hours 3 through 9"))

## parse the arguments
##############################
args = parser.parse_args()
args.date = dt.datetime.strptime(args.date, "%Y%m%d%H")
args.path = os.path.abspath(args.path)
args.fixDir = os.path.abspath(os.getenv("FIX_DIR_OM"))
args.letkfDir = os.path.abspath(os.getenv("CFS_LETKF_ROOT") + '/letkf-mom')
args.ares_x,args.ares_y = common.getAtmRes(args.ares)
args.wrkdir = os.path.abspath(os.getenv("TMP_DIR_SHARED")+"/cfs_fcst_" + \
                              hashlib.md5(args.path).hexdigest()[0:6] + \
                              "_{:03d}".format(args.ensNum))
if args.aobs is not None:
   args.aobs = os.path.abspath(args.aobs)
if args.oobs is not None:
   args.oobs = args.oobs.split()
   args.oobs = [os.path.abspath(o) for o in args.oobs]
   
assert( args.ensNum > 0 and args.ensNum <= common.getEnsMem(args.path))
## date: the date the forecast was initialized from
dateShort = args.date.strftime("%Y%m%d%H")
dateDir   = args.date.strftime("/%Y/%Y%m/%Y%m%d/%Y%m%d%H/")
## ndate: the next date, the date of the analysis
ndate      = args.date + dt.timedelta(hours=6)
ndateShort  = ndate.strftime("%Y%m%d%H")
ndateDir    = ndate.strftime("/%Y/%Y%m/%Y%m%d/%Y%m%d%H/")


############################################################
## print some basic information
log.info("CFSv2-LETKF ensemble member step.")
log.info("Runs the forecast and any other required per member pre LETKF steps")
log.info("Travis Sluka, University of Maryland, 2016")
log.info("")
log.info("Configuration:")
args_v = vars(args)
for v in args_v:
   log.info("    "+v+" : "+ str(args_v[v]))

if args.oobs is None:
   log.warn("No ocean observations directory is specified, not ocean obs will be assimilated")

   
## make sure the wrk directory is empty
log.info("Setting up working directory "+args.wrkdir)
if os.path.exists(args.wrkdir):
   shutil.rmtree(args.wrkdir)
   os.makedirs(args.wrkdir)


   
############################################################
## run the CFS forecast
if do_cfs:
   log.info("Running the CFS forecast...")
   cmd = 'run_fcst {0}/anal/{1:03d} {0}/gues/{1:03d} {2} --wrkdir {3} --ares {4} --ores {5} --nemonml {6}'.format(
      args.path, args.ensNum, dateShort, args.wrkdir, args.ares, args.ores, args.path+'/cfg/nemo.nml')
   if args.is3d: cmd += " --len 6 --period 6"
   log.info ("calling with: "+cmd)
   log.info("")
   if (sp.call(cmd, shell=True) > 0):
      log.error("Problem running CFS forecast.")
      sys.exit(1)

      
############################################################
## convert atmosphere spectral files to gridded
if do_atmcnvt:
   log.info("Converting atmosphere spectral files to gridded...")
   jobs = []
   
   if args.is3d:
      fcstHrStart = 6
      fcstHrEnd = 6
      baseSlot = 1
   else:
      fcstHrStart = 3
      fcstHrEnd   = 9
      baseSlot    = 4 ## hour 6
      
   for hr in range(fcstHrStart, fcstHrEnd+1):
      tmpDir = args.wrkdir+'/ss2grd_wrk_{0:02d}'.format(hr)
      if (not os.path.exists(tmpDir)): os.makedirs(tmpDir)
      os.symlink("{}/gues/{:03d}/{}_F{:02d}.sig".format(args.path,args.ensNum,dateShort,hr), tmpDir+'/fort.11')
      os.symlink("{}/gues/{:03d}/{}_F{:02d}.sfc".format(args.path,args.ensNum,dateShort,hr), tmpDir+'/fort.12')
      with open(tmpDir+'/ssio.nml', 'w') as f:
         f.write('$common_gfs nlon={} nlat={} gfs_jcap={} nlev=64 /'.format(
            args.ares_x, args.ares_y, args.ares))
      cmd =('$CFS_LETKF_ROOT/util/bin/ss2grd; '
            'cp fort.31 {}/gues/{:03d}/{}_F{:02d}.grd'.format(
               args.path,args.ensNum, dateShort, hr))
      jobs.append(sp.Popen(cmd, shell=True, cwd=tmpDir))
   for j in jobs:
      j.wait()
      if (j.returncode != 0 ):
         log.error("Problem converting spectral to gridded")
         sys.exit(1)


         
############################################################
## run the ATM observation operator
if do_atmobsop and args.aobs:
   log.info("Running ATM observation operator...")
   tmpdir = args.wrkdir+'/atmObsop'
   if (not os.path.exists(tmpdir)): os.makedirs(tmpdir)

   if args.is3d:
      window = 0
      fcstHrStart = 6
      fcstHrEnd = 6
      baseSlot = 1
   else:
      window = 3
      fcstHrStart = 3
      fcstHrEnd = 9
      baseSlot = 4
      
   ##get the observations linked
   idx=1
   for slot in range(-window,window+1):
         slotPfx = '{:+d}'.format(slot) if slot != 0 else ''
         obsFile = args.aobs+'/'+ndateDir+'/t'+slotPfx+'.dat'
         if (not os.path.exists(obsFile)):
            log.warn("ATM obs file does not exist: "+obsFile)
            cmd = 'touch {}/obs{:02d}.dat'.format(tmpdir,idx)
         else:
            log.info("linking ATM obs file: "+obsFile)
            cmd = 'ln -s {} {}/obsin{:02d}.dat'.format(obsFile, tmpdir, idx)
         sp.check_call(cmd, shell=True)
         idx +=1

   ## get the backgrounds linked
   for i in range(1, fcstHrEnd-fcstHrStart+2):
      bgFile = '{}/gues/{:03d}/{}_F{:02d}.grd'.format(
         args.path, args.ensNum, dateShort, i+fcstHrStart-1)
      log.info("linking background file: " + bgFile)
      os.symlink(bgFile, tmpdir+'/gues{:02d}.grd'.format(i))

   ## write the spectral configuration file
   shutil.copy(args.path+'/cfg/letkf.nml', tmpdir+'/letkf.nml')
   with open(tmpdir+'/ssio.nml', 'w') as f:
      res = common.getAtmRes(args.ares)
      f.write('$common_gfs nlon={} nlat={} gfs_jcap={} nlev=64 /'.format(
         res[0], res[1], args.ares))
   
   ## run the obsop
   cmd = '$CFS_LETKF_ROOT/letkf-gfs/letkf/obsope'
   sp.check_call(cmd, shell=True, cwd=tmpdir)

   shutil.copy(tmpdir+'/obsout.dat',
               args.path+'/obsop/{}_atm{:03d}.dat'.format(ndateShort, args.ensNum))


   
############################################################
## run ocean observation operator
if do_ocnobsop and args.oobs is not None:
   log.info("Running OCN observation operator...")   

   ## get the required files ready
   tmpDir = args.wrkdir+'/ocnObsop'
   if (not os.path.exists(tmpDir)): os.makedirs(tmpDir)
   os.symlink(args.letkfDir +'/obs/obsop', tmpDir+'/obsop')
   os.symlink(args.fixDir+'/grid_spec_{}.nc.T{}'.format(
      '1x1' if args.ores == '1' else args.ores, args.ares),
              tmpDir+'/grid_spec.nc')
   shutil.copy(args.path+"/cfg/letkf.nml", tmpDir+"/input.nml")
   for f in glob("{}/gues/{:03d}/{}_F06.ocean_*.res.nc".format(
         args.path, args.ensNum, dateShort)):
      f2 = os.path.basename(f)
      os.symlink(f, tmpDir+'/gs01.'+f2[15:])

   ## concatenate the ocean obs files into a single file
   cmd = "cat "
   for oobsDir in args.oobs:
      obsFile = os.path.abspath(oobsDir + ndate.strftime('/%Y/%Y%m/%Y%m%d/%Y%m%d%H.dat'))
      log.info("Using obs file: " + obsFile)
      cmd += obsFile +" "
   cmd += "> " + tmpDir + '/obsin.dat'
   sp.call(cmd, shell=True)
   

   ## Run the observation operator
   ret = sp.call('obsop -obsin obsin.dat -gues gs01 -obsout {}_ocn{:03d}.dat'.format(
      args.path+'/obsop/'+ndate.strftime('%Y%m%d%H'), args.ensNum),
           shell=True, cwd=tmpDir)
   if ret != 0:
      log.critical('error running ocean observation operator')
      sys.exit(1)

else:
   cmd='touch {}_ocn{:03d}.dat'.format(args.path+'/obsop/'+ndate.strftime('%Y%m%d%H'), args.ensNum)
   sp.check_call(cmd, shell=True)


############################################################
## copy logs/file and cleanup
if do_cleanup:
   log.info("Cleaning up and copying files...")
   shutil.rmtree(args.wrkdir)


#!/usr/bin/env python
################################################################################
## create the initial ensemble for the CFSv2-LETKF using analysis from
## another CFS-LETKF experiment output
##
## Cheng Da (cda@umd.edu) University of Maryland
##
## Environment variables required
##  CFS_LETKF_ROOT
##  TMP_DIR_LOCAL
##
################################################################################

import argparse
import os, shutil
import datetime as dt
import sys
import subprocess as sp
import hashlib

import common

## parse the command line arguments
parser = argparse.ArgumentParser( description=(
    "CFSv2-LETKF, ensemble member and project directory initialization.\n "
    "Generates the initial ensemble members for a new experiment by using analysis from\n"
    "another experiment") )

parser.add_argument('date', metavar="DATE", help=(
    'Initial date of data to generate. Should be in format of "YYYYMMDDHH"'))
parser.add_argument('path', metavar='DST_DIR', help=(
    "Path to the new directory to create for the experiment. E.g., '../DATA/exp1'"))
parser.add_argument('mem', metavar='MEM', type=int, help=(
    "Number of ensemble members to generate"))

parser.add_argument('--source', metavar="SOURCE_DIR", help=(
    "the directory where to copy the directory"))
parser.add_argument('--force','-f', action='store_true', help= (
    "force overwriting of any existing directory"))
parser.add_argument('--copyflux','-copyflux', action='store_true', help= (
    "also copy flux files for ocean"))
parser.add_argument('--ares',type=int,choices=[62,126,382],default=62,help=(
    "horizontal resolution of the atmosphere (Default: 62)"))
args = parser.parse_args()

## process command line arguments
args.path = os.path.abspath(args.path)

args.initGFS = args.source
args.initMOM = args.source

args.rootDir = os.getenv("CFS_LETKF_ROOT")
args.ssioDir = args.rootDir+'/util/bin'
args.initDate=dt.datetime.strptime(args.date,"%Y%m%d%H").date()
args.tmpDir  = os.getenv("TMP_DIR_LOCAL")+"/init_" + hashlib.md5(args.path).hexdigest()[0:6]
##
print ("Configuration:\n"+str(args))


## ------------------------------------------------------------
## setup temporary directory
if os.path.exists(args.tmpDir):
        shutil.rmtree(args.tmpDir)
os.makedirs(args.tmpDir)
shutil.copy(args.ssioDir+'/sscycle2', args.tmpDir)

## write the namelist for the sscyle program
with open(args.tmpDir+'/ssio.nml', 'w') as f:
    res = common.getAtmRes(args.ares)
    f.write('$common_gfs nlon={} nlat={} gfs_jcap={} nlev=64 /'.format(
        res[0], res[1], args.ares))



## create the output directory if it does not already exist
if os.path.exists(args.path):
    if args.force:
        print 'removing dir'
        shutil.rmtree(args.path)
    else:
        print ('Directory {0} already exists, remove and try again or force removal of old '
               ' directory with the "-f" option.').format(os.path.abspath(args.path))
os.makedirs(args.path)
os.makedirs(args.path+'/infl_mul')
os.makedirs(args.path+'/logs')
os.makedirs(args.path+'/obsop')

## create folders for ensemble members, and copy
## other date into it for the initial conditions
# /anal/mean, /anal/sprd, /gues/mean/, /gues/sprd/
for d in ('anal','gues'):
    [os.makedirs(args.path+'/{0}/{1}'.format(d,d2)) for d2 in ('mean','sprd')]

## copy an initial letkf namelist
os.makedirs(args.path+'/cfg')
env = os.environ
env['nbv'] = str(args.mem)
sp.check_call("source $CFS_LETKF_ROOT/run/config_files/letkf.nml > letkf.nml",
               shell=True, cwd=args.path+'/cfg')

## copy the global settings
for f in ('nemo.nml','exp.config'):
    sp.check_call("cp $CFS_LETKF_ROOT/run/config_files/{} .".format(f),
                  shell=True, cwd=args.path+'/cfg')

## copy ensemble members
for m in range(1,args.mem+1):
    for d in ('anal','gues'):
        os.makedirs(args.path+'/{0}/{1:03d}/'.format(d,m))

    ## determine where to get the files from
    srcOcn = args.initMOM + \
             '/{0:03d}'.format(m) + args.initDate.strftime("/%Y%m%d%H")
    srcAtm = args.initGFS + \
             '/{0:03d}'.format(m) + args.initDate.strftime("/%Y%m%d%H")
        
    print('member {0:03d} OCN from'.format(m) + srcOcn)
    print('member {0:03d} ATM from'.format(m) + srcAtm)
    ## Atmosphere files
    ##############################
    files=['sig','sfc']
    outPath = args.path+'/anal/{0:03d}/'.format(m)
    for f in files:
        print(srcAtm+"."+f+" "+outPath+'{}.{}'.format(args.date,f))
        shutil.copy(srcAtm+"."+f, outPath+'{}.{}'.format(args.date,f))

    ## Ocean files
    ##############################
    files=['ocean_'+x for x in (
        'frazil', 'freesurf', 'neutral', 'temp_salt',
        'velocity', 'velocity_advection', 'sbc','density')]
    files += ('ice_model',)

    outPath = args.path+'/anal/{0:03d}/'.format(m)
    for f in files:
        filename = f+".res.nc"
        print(srcOcn+"."+filename+" "+outPath+'{}.{}.res.nc'.format(args.date,f))
        shutil.copy(srcOcn+"."+filename, outPath+'{}.{}.res.nc'.format(args.date,f))

    if args.copyflux:
        filename = "fluxes_restart"
        print(srcOcn+"."+filename+" "+outPath+'{}.{}'.format(args.date,filename))
        shutil.copy(srcOcn+"."+filename, outPath+'{}.{}'.format(args.date,filename))
    

## create/copy the grads ctl files
datestr=dt.datetime.strptime(args.date,"%Y%m%d%H").strftime("%e%b%Y")
with open(args.rootDir+'/letkf-mom/ocn.ctl','r') as fin:
    with open(args.path+'/anal/mean/ocn.ctl','w') as fout:
        for line in fin:
            line = line.replace("##DATE##", datestr)
            fout.write(line)
with open(args.path+'/anal/mean/atm.ctl','w') as out:
    sp.call(args.ssioDir+'/grdctl "%y4/%y4%m2/%y4%m2%d2/%y4%m2%d2%h2/%y4%m2%d2%h2_atm.grd" "template" '+ datestr +' 6hr 10000 s'
            , shell=True, stdout=out, cwd=args.tmpDir)
for f in ('/anal/sprd/','/gues/mean/','/gues/sprd/', '/infl_mul/'):
    shutil.copy(args.path+'/anal/mean/ocn.ctl',args.path+f)
    shutil.copy(args.path+'/anal/mean/atm.ctl',args.path+f)
   
## cleanup
shutil.rmtree(args.tmpDir) 

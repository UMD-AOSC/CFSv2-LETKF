#!/usr/bin/env python
############################################################
##
## TODO, insert description
##
############################################################

## load built-in python modules
import argparse
import os, sys, shutil
import subprocess as sp
from glob import glob
import datetime as dt

## load our own modules
import common

## setup the logging system
log = common.setupLog()


############################################################
## get the command line /env arguments

parser = argparse.ArgumentParser(description=(
    "TODO, insert description"))

## required variables
parser.add_argument('path', metavar="PATH", help=(
    "Path to the directory storing the experiment."))
parser.add_argument('date', metavar="DATE", help=(
    "Date that the forecasts were started from, in YYYYMMDDHH format."
    " E.g. for an analysis at 2010010106, 2010010100 would be passed in here"))

## parse the arguments
args = parser.parse_args()
args.path = os.path.abspath(args.path)
args.date = dt.datetime.strptime(args.date, "%Y%m%d%H")
args.wrkdir = os.path.abspath(os.getenv("TMP_DIR_LOCAL")+"/cfs/atm_obsop")
args.adate = args.date + dt.timedelta(hours=6)
args.aobsDir = os.path.abspath(os.getenv("CFS_LETKF_ROOT")+'/DATA/obs/atm_prepbufr')
args.mem  = common.getEnsMem(args.path)
args.thinning = False

adateDir = args.adate.strftime("%Y/%Y%m/%Y%m%d/%Y%m%d%H")
dateShort = args.date.strftime("%Y%m%d%H")
adateShort = args.adate.strftime("%Y%m%d%H")

############################################################
## print some configuration information
log.info("CFSv2-LETKF atmospheric obsop step.")
log.info("")
log.info("Travis Sluka, University of Maryland, 2016")
log.info("")
log.info("Configuration: \n"+str(args)+"\n")


############################################################
log.info("Preparing observations and files...")
if (not os.path.exists(args.wrkdir)): os.makedirs(args.wrkdir)
shutil.copy(os.getenv("CFS_LETKF_ROOT")+'/run/config_files/letkf_mom.nml', args.wrkdir+'/letkf.nml')

## get the observations linked
window = 3
idx = 1
for slot in range(-window,window+1):
    slotPfx = '{:+d}'.format(slot) if slot !=0 else ''
    obsFile = args.aobsDir+'/'+adateDir+'/t'+slotPfx+'.dat'
    if (not os.path.exists(obsFile)):
        log.error("obs file not found: "+obsFile)
        cmd = 'touch {}/obs{:02d}.dat'.format(args.wrkdir, idx)        
    else:
        cmd = 'ln -s {} {}/obs{:02d}.dat'.format(obsFile, args.wrkdir, idx)
    sp.check_call(cmd, shell=True)
    idx += 1

## get the background linked
for m in range(1,args.mem+1):
    os.symlink(args.path+'/gues/{:03d}/{}_F06.grd'.format(m,dateShort),
               args.wrkdir+'/gues{:03d}.grd'.format(m))

    
## -
log.info("Calculating ensemble mean...")
cmd = 'mpirun -n $NPROC_LETKF $CFS_LETKF_ROOT/letkf-gfs/letkf/mean &> ensmean.log'
sp.check_call(cmd, shell=True, cwd=args.wrkdir)
os.symlink(args.wrkdir+'/gues_me.grd', args.wrkdir+'/refpres.dat')


## -
if args.thinning:
    log.info("Performing obs thinning...")
    cmd = '$CFS_LETKF_ROOT/letkf-gfs/util/superob &> superob.log'
    sp.check_call(cmd, shell=True, cwd=args.wrkdir)
    sp.check_call("rm obs??.dat", shell=True, cwd=args.wrkdir)

    for i in range(1,window*2+2):
        shutil.move(args.wrkdir+'/sup{:02d}.dat'.format(i),
                    args.wrkdir+'/obs{:02d}.dat'.format(i))

                
## -
log.info("ATM observation operators...")
fcstHrStart = 3
fcstHrEnd   = 9
baseSlot    = 4 ## hour 6
jobs=[]
for m in range(1,args.mem+1):
    ## create a working directory for each ensemble member,
    ## and link in the obs and gues
    tmpdir = args.wrkdir+'/obsop_{:03d}'.format(m)
    os.makedirs(tmpdir)
    os.symlink(args.wrkdir+'/letkf.nml', tmpdir+'/letkf.nml')    
    for i in range(1,fcstHrEnd-fcstHrStart+2):
        os.symlink(args.wrkdir+'/obs{:02d}.dat'.format(i),
                   tmpdir +'/obsin{:02d}.dat'.format(i))
        shutil.copy(args.path+'/gues/{:03d}/{}_F{:02d}.grd'.format(m,dateShort, i+fcstHrStart-1),
                   tmpdir +'/gues{:02d}.grd'.format(i))
    
    cmd = '$CFS_LETKF_ROOT/letkf-gfs/letkf/obsope $> obsope{:03d}.log'.format(m)
    jobs.append(sp.Popen(cmd, shell=True, cwd=tmpdir))
for j in jobs:
    j.wait()
    if (j.returncode != 0):
        log.error("Problem with atm obsope")
        sys.exit(1)
if (not os.path.exists(args.path+'/obsop')): os.makedirs(args.path+'/obsop')
for m in range(1,args.mem+1):
    f = args.wrkdir+'/obsop_{:03d}/obsout.dat'.format(m)
    d = args.path+'/obsop/{}_atm{:03d}.dat'.format(adateShort,m)
    if os.path.exists(f):
        shutil.copy(f, d)
    else:
        sp.check_call('touch '+d, shell=True)
        

## -
log.info("Done, cleaning up...")
shutil.rmtree(args.wrkdir)
        
